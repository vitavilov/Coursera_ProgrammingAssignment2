str(ts.d)
ISOtimedate(SSB_met[1,1])
ISOdatetime(SSB_met[1,1])
as.Posixlt(SSB_met[1,1])
as.POSIXlt(SSB_met[1,1])
SSB_met[,1] <- as.POSIXlt(SSB_met[,1])
str(SSB_met)
View(SSB_met)
rm(SSB_met)
SSB_d <- read.table("C:/1-SSB/SSB_met.csv", sep=";", quote="\"")
View(SSB_d)
rm(SSB_M)
str(SSB_d)
SSB_ts <- as.POSIXlt(SSB_d[,1])
fix(SSB_ts)
as.POSIXlt(SSB_d[1,1])
as.POSIXlt(SSB_d[2,1])
SSB_ts <- as.POSIXlt(SSB_d[V1])
SSB_ts <- as.POSIXlt(SSB_d[,1])
as.POSIXlt(strptime(SSB_d[1,1], "%Y-%m-%d %H:%M:%S"))
as.POSIXlt(strptime(SSB_d[,1], "%Y-%m-%d %H:%M:%S"))
SSB_TS <- as.POSIXlt(strptime(SSB_d[,1], "%Y-%m-%d %H:%M:%S"))
SSB_TS <- as.POSIXct(strptime(SSB_d[,1], "%Y-%m-%d %H:%M:%S"))
rm(SSB_ts)
SSB_d2 <- c(SSB_TS, SSB_d)
rm(SSB_d2)
SSB_ts <- as.data.frame (SSB_TS)
SSB_d2 <- c(SSB_ts, SSB_d)
SSB_d2 <- SSB_d
SSB_d2[,1] <- SSB_ts
str(SSB_d2)
SSB_m <- merge(ts.d, SSB_d2)
SSB_m <- merge(SSB_d2, ts.d)
View(SSB_m)
View(ts.d)
View(SSB_d2)
SSB_m <- merge(ts.d, SSB_d2, all=L)
SSB_m <- merge(ts.d, SSB_d2, all=T)
write.csv(SSB_m, "C:/1-SSB/SSB_m.csv")
savehistory("C:/Users/Vitaly Avilov/Desktop/SSB_XLSX/R history (POSIXs).Rhistory")
a <- c(230,387,229,275,205)
summary (a)
shapiro.test(a)
plot(a)
shapiro.test(rnorm(5))
mean(a)
sd(a)
confint(a)
?lm
fix(a)
fix(a)
boxplot(a)
265.2+72.63*2
a
a <- (1,2)
a <- (1;2)
a <- c(1,2)
load("C:/Users/Vitaly Avilov/Google Диск/1 Research stations/Vietnam/2014-04-22 NCT LAI/bulk_LAI.txt")
bulk_LAI <- read.table("C:/tmp_par/bulk_LAI.txt", quote="\"")
View(bulk_LAI)
?ks
shapiro.test(bulk_LAI)
LAI <- as.vector(bulk_LAI)
str(LAI)
LAI <- as.numeric(bulk_LAI)
str(bullk_LAI)
str(bulk_LAI)
lai <- as.numeric(bulk_LAI$V1)
rm(a)
lai
shapiro.test(lai)
hist(lai)
ks.test(lai,"pnorm")
salary <- c(21,19,27,11,102,25,21)
hist(salary)
new.1000 <- sample((median(salsry)-IQR(salary)):(median(salsry)+IQR(salary)),1000,replace=T)
new.1000 <- sample((median(salary)-IQR(salary)):(median(salary)+IQR(salary)),1000,replace=T)
salary2 <- c(salary,new.1000)
hist(salary2)
shapiro.test(salary)
shapiro.test(salary2)
shapiro.test(lai)
?shapiro.test
ggnorm(lai)
ggplot(lai)
qqnorm(lai)
qqnorm(rnorm(100))
qqnorm(lai)
shapiro.test(lai)
?runif
set.seed(450)
x<-runif(50,min=2,max=4)
hist(x)
plot(density(lai))
?CLT
?normal
summary(lai)
?t.test
t.test(lai, mu=mean(lai))
wilcox.rest(lai,mu=median(lai),conf.int=true)
wilcox.test(lai,mu=median(lai),conf.int=true)
wilcox.test(lai,mu=median(lai),conf.int=T)
hist(lai, breaks=10)
ks.test(lai)
ks.test(lai, pnorm)
ks.test(pnorm, pnorm)
ks.test(rnorm(100), pnorm)
ks.test(rnorm(1000), pnorm)
hist(lai, breaks=8)
hist(lai, breaks=9)
hist(lai, breaks=10)
hist(lai, breaks=14)
plot(density(lai))
plot(density(lai, bandwidth=2))
?density
a<-density(lai,bw=2)
plot()
plot(a)
plot(density(lai))
plot(density(lai,bw=0.2))
hist(lai, breaks=10)
plot(lai)
hist(lai, breaks=10)
hist(lai, breaks=10, main="", xlab="LAI, m+2m-2")
wilcox.test(lai,mu=mean(lai),conf.int=T)
wilcox.test(lai,mu=mean(lai),conf.int=T)
summary(lai)
wilcox.test(lai,mu=median(lai),conf.int=T)
boxplot(lai)
?nf
??nf
?layout
nf <- layout(mat = matrix(c(1,2),2,1, byrow=TRUE),  height = c(1,3))
par(mar=c(5.1, 4.1, 1.1, 2.1))
hist(data,xlim=c(2,7))
hist(lai,xlim=c(2,7))
hist(lai,xlim=c(3,7),breaks=10)
boxplot(lai, horizontal=TRUE,  outline=FALSE,ylim=c(3,7))
str(nf)
nf <- layout(mat = matrix(c(1,2),2,1, byrow=TRUE),  height = c(1,3))
window()
?window
par(mar=c(5.1, 4.1, 1.1, 2.1))
nf <- layout(mat = matrix(c(1,2),2,1, byrow=TRUE),  height = c(3,1))
par(mar=c(3.1, 3.1, 1.1, 2.1))
hist(lai,xlim=c(3,7), breaks=10)
boxplot(lai, horizontal=TRUE,  outline=TRUE,ylim=c(3,7), frame=F, width = 10)
boxplot(lai, horizontal=TRUE,  outline=TRUE,ylim=c(3,7), frame=F, width = 10)
boxplot(lai, horizontal=TRUE,  outline=TRUE,ylim=c(3,7), frame=F, width = 10)
par(mar=c(1.1, 3.1, 1.1, 2.1))
hist(lai,xlim=c(3,7), breaks=10, main="")
boxplot(lai, horizontal=TRUE,  outline=TRUE,ylim=c(3,7), frame=F, width = 10, axes=F)
hist(lai,xlim=c(3,7), breaks=10, main="")
boxplot(lai, horizontal=TRUE,  outline=TRUE,ylim=c(3,7), frame=F, width = 5, axes=F)
hist(lai,xlim=c(3,7), breaks=10, main="")
boxplot(lai, horizontal=TRUE,  outline=TRUE,ylim=c(3,7), frame=F, width = 5, heght=5, axes=F)
?boxplot
boxplot(lai, horizontal=TRUE,  outline=TRUE,ylim=c(3,7), frame=F, width = 5, heght=5, axes=F)
boxplot(lai, horizontal=TRUE,  outline=TRUE,ylim=c(3,7), frame=F, width = 30, axes=F)
boxplot(lai, horizontal=TRUE,  outline=TRUE,ylim=c(3,7), frame=F, width = 30, axes=F)
boxplot(lai, horizontal=TRUE,  outline=TRUE,ylim=c(3,7), frame=F, width = 3, axes=F)
boxplot(lai, horizontal=TRUE,  outline=TRUE,ylim=c(3,7), frame=F, width = 3, axes=F)
boxplot(lai, horizontal=TRUE,  outline=TRUE,ylim=c(3,7), frame=F,axes=F)
hist(lai,xlim=c(3,7), breaks=10, main="")
boxplot(lai, horizontal=TRUE,  outline=TRUE,ylim=c(3,7), frame=F,axes=F)
hist(lai,xlim=c(3,7), breaks=10, main="")
boxplot(lai, horizontal=TRUE,  outline=TRUE,ylim=c(3,7), frame=F,axes=F, ylab="LAI,m+2m-2")
plot(lai)
plot(lai, type="o")
dev.off()
plot(lai, type="o")
??standard deviation
mad(lai)
sd(lai)
median(lai)
mad(lai)/median(lai)
sd(lai)/mean(lai)
plot(lai, type="o", ylab="LAI", xlab="measurement sequence")
savehistory("C:/tmp_par/par_hist.Rhistory")
View(bulk_LAI)
save.image("C:/tmp_par/par_R.RData")
library("raster", lib.loc="C:/Users/Vitaly Avilov/Documents/R/win-library/2.15")
search()
library(ggplot2)
install.packages ("ggplot2")
library(ggplot2)
search()
install.packages("KernSmooth")
library(KernSmooth)
update.packages(checkBuilt=TRUE, ask=FALSE)
install.packages("devtools")
library("devtools", lib.loc="~/R/win-library/3.1")
find_rtools()
library("devtools", lib.loc="~/R/win-library/3.1")
find_rtools()
data()
data(airquality)
rm(airquality)
data(airquality)
data(airquali)
?airquality
airquality
plot(airquality$Ozone)
View(airquality)
airquality(Month==6)
airquality[Month==6]
airquality[Month == 6]
airquality[Month]
airquality$Month
summary(airquality)
str(airquality)
airquality$Month[==4]
airquality$Month[month==5
]
airquality$Month[Month==5]
airquality[airquality$Month == 5]
airquality[airquality$Month == 5, ]
airquality[,c("Ozone", "Month")]
ozone.month <- airquality[,c("Ozone", "Month")]
ozone.month.list <- unstack(ozone.month)
str(ozone.month.list)
str(ozone.month.list$5)
oz\
ozone.month.list$5
ozone.month.list[1]
ozone.month.list[2]
ozone.month.list$'5'
str(ozone.month.list$'5')
summary(ozone.month.list$'5')
shapiro.test(ozone.month[ozone.month$Month==5, "Ozone"])
shapiro.test(ozone.month.list, "Ozone")
shapiro.test(ozone.month.list[,"Ozone"])
ozone.month.list[,"Ozone"]
ozone.month.list$'5'[,"Ozone"]
ozone.month.list$'5'
shapiro.test(ozone.month.list)
shapiro.test(ozone.month.list$'5')
shapiro.test(ozone.month.list$'6')
shapiro.test(ozone.month.list$'7')
hist(ozone.month.list$6)
hist(ozone.month.list$'6')
hist(ozone.month.list$'7')
shapiro.test(ozone.month.list$'8')
hist(ozone.month.list$'9')
data(HairEyeColor)
HairEyeColor
cor(trees)
trees
symnum(cor(trees))
library("reshape", lib.loc="~/R/win-library/3.1")
OldPlots_no.TS_boxplot <- read.csv("C:/Users/Vitaly Avilov/Google Drive/My Conferences and workshops/2014-12-04 AsiaFlux in CatTien/OldPlots_no TS_boxplot.csv", na.strings="na")
View(OldPlots_no.TS_boxplot)
a <- melt(data = OldPlots_no.TS_boxplot, id.vars = )
a <- melt(data = OldPlots_no.TS_boxplot)
a
str(a)
anova(lm(a$variable~a$value))
plot(a$variable ~ a$value))
plot(a$variable ~ a$value)
plot(a$value~a$variable)
anova(lm(a$value~a$variable))
pairwise.t.test(a$value, a$variable)
kruskal.test(a$value~a$variable)
pairwise.wilcox.test(a$value, a$variable,paired=T)
pairwise.wilcox.test(a$value, a$variable)
head(a)
a
str(a)
View(a)
View(a)
View(a)
View(a)
head(a[1,])
head(a[,1])
colnames(a)
View(a)
colnames(a) <- c("site","Rs.avg")
View(a)
colnames(a) <- c("site","rs.avg")
oldplots<-a
rm(a)
pairwise.wilcox.test(oldplots$Rs.avg, oldplots$site)
oldplots$Rs.avg
View(oldplots)
oldplots$rs.avg
pairwise.wilcox.test(oldplots$rs.avg, oldplots$site)
plot(oldplots$rs.avg~\ oldplots$site)
plot(oldplots$rs.avg~ oldplots$site)
`CV_twr~plots` <- read.csv("C:/Users/Vitaly Avilov/Google Drive/My Conferences and workshops/2014-12-04 AsiaFlux in CatTien/CV_twr~plots.csv")
View(`CV_twr~plots`)
wilcox.test(CV_twr~plots$CV_TWR, CV_twr~plots$CV_Plots)
a <- CV_twr~plots
View(`CV_twr~plots`)
rm(a)
rm(CV_twr~plots)
CV_twr.plots <- read.csv("C:/Users/Vitaly Avilov/Google Drive/My Conferences and workshops/2014-12-04 AsiaFlux in CatTien/CV_twr-plots.csv")
View(CV_twr.plots)
wilcox.test(CV_twr.plots$CV_TWR, CV_twr.plots$CV_Plots)
summary(CV_twr.plots)
48-16
save.image("C:/Users/Vitaly Avilov/Google Drive/My Conferences and workshops/2014-12-04 AsiaFlux in CatTien/pairwice_test.RData")
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f(3)
z<-10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
ls()
debug(ls)
ls()
q
q()
q
q
q()
й
q
q
q
q
q
C
?browser
C
q
getmean <- function() m
m<- "ХУЙ"
getmean
getmean()
rm(m)
getmean()
m1 <- matrix(data = 1:25, nrow = 5,ncol = 5)
m1
m2 <- solve(m1)
m1 <- matrix(data = rnorm(25), nrow = 5,ncol = 5)
m2 <- solve(m1)
m1*m2
m1 %*% m2
round(m1 %*% m2,2)
rm(ls())
rm(list = ls())
a="huy"
f <- function () {}
f <- function () {
n<-3
n<<-a
n
}
f
f()
f <- function () {
n <- 3
n <<- a
n
}
rm(n)
f()
setwd("C:/Users/Vitaly Avilov/Coursera/C2_R_programming/prog_assign_2/ProgrammingAssignment2")
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(1)
makeVector(1:3)
x <- "x"
foo <- function(x) x <- "not x"
foo(x)
x
foo <- function(x) x <<- "not x"
foo(x)
x
print(c("take ",x))
x <- "not x"
print(c("make ",x))
}
foo <- function(x) {
print(c("take ",x))
x <- "not x"
print(c("make ",x))
}
x <- "x"
foo(x)
changeVec <- function(set) set(6:10)
set(6:10)
changeVec(vec$set)
rm(list = ls())
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
bigVec <- makeVector(1:1000)
str(bigVec)
biggerVec <- makeVector(1:100000)
cachemean(bigVec)
cachemean(bigVec)
cachemean(biggerVec)
cachemean(biggerVec)
cachemean(biggerVec)
bigVec <- makeVector(1:2)
cachemean(bigVec)
cachemean(bigVec)
biggerVec$get()
x[1:20]
d(sx)
c("d","dcdc")
bigVec
bigVec$x
bigVec$m
bigVec$d
parent.env(x)
makeVector
environment(makeVector)
env.profile(makeVector)
bigVec$x
bigVec$get
env.profile(0x000000000a9ef290)
bigVec$get()
bigVec$get(2)
bigVec$get()
rm(makeVector)
bigVec$get()
rm(bigVec$set)
a<- bigVec$get
a
a()
x<-6
a()
a
Sys.getenv(a)
Sys.getenv("a")
ls(a)
ls(bigVec)
ls(bigVec$get)
## Put comments here that give an overall description of what your
## functions do
## Create an object that contains
## a matrix and it's inversed form in local environment
## and a list of 4 functions in global environment
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() {x}
setinv <- function(inversed) {inv <<- inversed}
getinv <- function(){inv}
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## assumed that the matrix supplied is always invertible
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
test <- makeCacheMatrix(matrix(rnorm(25),nrow = 5,ncol = 5))
cacheSolve(test)
cacheSolve(test)
test <- makeCacheMatrix(matrix(1:25,nrow = 5,ncol = 5))
cacheSolve(test)
